{"version":3,"sources":["components/NavigationBar/NavigationBar.js","components/ItemCard/ItemCard.js","components/Loading/Loading.js","components/ItemList/ItemList.js","components/ItemDetail/ItemDetail.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","className","to","exact","withRouter","props","onClick","history","push","item","id","onDelete","title","body","Loading","useState","items","setItems","loading","setLoading","useEffect","getItems","axios","get","then","res","data","catch","err","alert","delete","filteredItems","filter","itemList","map","key","length","ItemDetail","setId","setTitle","setBody","match","params","pageMode","type","placeholder","onChange","e","target","value","rows","post","updatedItem","put","routes","path","component","ItemList","App","from","route","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.04e8c0dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './NavigationBar.css';\r\nconst NavigationBar = () => {\r\n  return (\r\n    <div className=\"NavigationBar\">\r\n      <header>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <NavLink to=\"/item-list\" exact>\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/add-new-item\">Add New Item</NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import React from 'react';\r\nimport './ItemCard.css';\r\nimport { withRouter } from 'react-router-dom';\r\nconst ItemCard = (props) => {\r\n  const updateHandler = () => {\r\n    props.history.push(`/update-item/${props.item.id}`);\r\n  };\r\n  const deleteHandler = () => {\r\n    props.onDelete(props.item.id);\r\n  };\r\n  return (\r\n    <div className=\"ItemCard\">\r\n      <div className=\"button-container\">\r\n        <button onClick={updateHandler}>Update</button>\r\n        <button onClick={deleteHandler}>Delete</button>\r\n      </div>\r\n\r\n      <h3 className=\"title\" title={props.item.title}>\r\n        {props.item.title}\r\n      </h3>\r\n      <p className=\"body\" title={props.item.body}>\r\n        {props.item.body}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(ItemCard);\r\n","import React from 'react';\r\nimport './Loading.css';\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"lds-ripple\">\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport ItemCard from '../ItemCard/ItemCard';\r\nimport './ItemList.css';\r\nimport Loading from '../Loading/Loading';\r\nconst ItemList = (props) => {\r\n  const [items, setItems] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    getItems();\r\n  }, []);\r\n\r\n  const getItems = () => {\r\n    setLoading(true);\r\n    axios\r\n      .get('https://jsonplaceholder.typicode.com/posts')\r\n      .then((res) => {\r\n        setItems(res.data);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        alert(err);\r\n      });\r\n  };\r\n\r\n  const onDelete = (id) => {\r\n    setLoading(true);\r\n    axios\r\n      .delete(`https://jsonplaceholder.typicode.com/posts/${id}`)\r\n      .then((res) => {\r\n        const filteredItems = items.filter((item) => item.id !== id);\r\n        setItems(filteredItems);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        alert(err);\r\n      });\r\n  };\r\n\r\n  const itemList = items.map((item) => {\r\n    return <ItemCard key={item.id} item={item} onDelete={onDelete}></ItemCard>;\r\n  });\r\n\r\n  return (\r\n    <div className=\"ItemList\">\r\n      {itemList}\r\n      {loading && <Loading />}\r\n      {!loading && itemList.length === 0 && (\r\n        <p className=\"not-found-text\">No Item Found</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(ItemList);\r\n","import React, { useState, useEffect } from 'react';\r\nimport './ItemDetail.css';\r\nimport axios from 'axios';\r\nimport Loading from '../Loading/Loading';\r\n\r\nconst ItemDetail = (props) => {\r\n  const [id, setId] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [body, setBody] = useState('');\r\n  const [pageMode, setPageMode] = useState(\r\n    !!props.match.params.id ? 'Update' : 'Insert'\r\n  );\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (pageMode === 'Update') {\r\n      setLoading(true);\r\n      axios\r\n        .get(\r\n          `https://jsonplaceholder.typicode.com/posts/${props.match.params.id}`\r\n        )\r\n        .then((res) => {\r\n          const item = res.data;\r\n          setId(item.id);\r\n          setTitle(item.title);\r\n          setBody(item.body);\r\n          setLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          alert(err);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const titleChangedHandler = (e) => {\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  const bodyChangedHandler = (e) => {\r\n    setBody(e.target.value);\r\n  };\r\n\r\n  const addItemHandler = () => {\r\n    const item = {\r\n      title,\r\n      body,\r\n    };\r\n    setLoading(true);\r\n    axios\r\n      .post('https://jsonplaceholder.typicode.com/posts', item)\r\n      .then((res) => {\r\n        props.history.push('/item-list');\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        alert(err);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const updateItemHandler = () => {\r\n    const updatedItem = {\r\n      id,\r\n      title,\r\n      body,\r\n    };\r\n    setLoading(true);\r\n    axios\r\n      .put(`https://jsonplaceholder.typicode.com/posts/${id}`, updatedItem)\r\n      .then((res) => {\r\n        props.history.push('/item-list');\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        alert(err);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"ItemDetail\">\r\n      <div className=\"form-group\">\r\n        <label>Title</label>\r\n        <input\r\n          className=\"form-item\"\r\n          id=\"title\"\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          onChange={titleChangedHandler}\r\n          value={title}></input>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Body</label>\r\n        <textarea\r\n          className=\"form-item\"\r\n          id=\"body\"\r\n          type=\"text\"\r\n          rows=\"5\"\r\n          placeholder=\"Body\"\r\n          onChange={bodyChangedHandler}\r\n          value={body}></textarea>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        {pageMode === 'Insert' ? (\r\n          <button className=\"button\" onClick={addItemHandler}>\r\n            Add\r\n          </button>\r\n        ) : (\r\n          <button className=\"button\" onClick={updateItemHandler}>\r\n            Update\r\n          </button>\r\n        )}\r\n      </div>\r\n      {loading && <Loading />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemDetail;\r\n","import ItemList from './components/ItemList/ItemList';\r\nimport ItemDetail from './components/ItemDetail/ItemDetail';\r\n\r\nconst routes = [\r\n  {\r\n    path: '/item-list',\r\n    component: ItemList,\r\n  },\r\n  {\r\n    path: '/add-new-item',\r\n    component: ItemDetail,\r\n  },\r\n  {\r\n    path: '/update-item/:id',\r\n    component: ItemDetail,\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import React from 'react';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar/NavigationBar';\nimport { Switch, Route, HashRouter, Redirect } from 'react-router-dom';\nimport routes from './routes';\nfunction App() {\n  return (\n    <HashRouter>\n      <NavigationBar />\n      <Switch>\n        <Redirect exact from=\"/\" to=\"item-list\" />\n        {routes.map((route) => {\n          return <Route key={route.path} exact {...route} />;\n        })}\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}