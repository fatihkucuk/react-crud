{"version":3,"sources":["components/NavigationBar/NavigationBar.js","pages/ListPage/ItemCard/ItemCard.js","components/Loading/Loading.js","pages/ListPage/store/action-types.js","store/action-types.js","pages/ListPage/ItemList.js","constants.js","pages/DetailPage/store/action-types.js","pages/DetailPage/store/actions.js","pages/DetailPage/ItemDetail.js","routes.js","App.js","serviceWorker.js","store/reducers.js","pages/ListPage/store/reducers.js","pages/DetailPage/store/reducers.js","store/store.js","store/actions.js","pages/ListPage/store/services.js","pages/ListPage/store/actions.js","pages/DetailPage/store/services.js","index.js"],"names":["NavigationBar","className","to","exact","withRouter","props","onClick","history","push","item","id","onDelete","title","body","Loading","setItems","items","type","setLoading","loading","connect","state","listPageReducer","rootReducer","dispatch","getItems","actionCreators","deleteItem","rootActionCreators","useEffect","itemList","map","key","length","apiEndpoint","PAGE_MODE","setItem","successPost","successPut","actionTypes","ItemDetail","useDispatch","useState","match","params","pageMode","useSelector","detailPageReducer","navigateToListPage","placeholder","onChange","e","target","value","rows","callback","postItem","putItem","routes","path","component","ItemList","App","from","route","Boolean","window","location","hostname","initialState","reducer","action","filter","combinedReducers","combineReducers","listPageServices","put","call","axios","get","response","data","alert","delete","takeLatest","getItem","detailPageServices","post","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19e59696.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './NavigationBar.css';\r\nconst NavigationBar = () => {\r\n  return (\r\n    <div className=\"NavigationBar\">\r\n      <header>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <NavLink to=\"/item-list\" exact>\r\n                List\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/add-new-item\">Add New Item</NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import React from 'react';\r\nimport './ItemCard.css';\r\nimport { withRouter } from 'react-router-dom';\r\nconst ItemCard = (props) => {\r\n  const updateHandler = () => {\r\n    props.history.push(`/update-item/${props.item.id}`);\r\n  };\r\n  const deleteHandler = () => {\r\n    props.onDelete(props.item.id);\r\n  };\r\n  return (\r\n    <div className=\"ItemCard\">\r\n      <div className=\"button-container\">\r\n        <button onClick={updateHandler}>Update</button>\r\n        <button onClick={deleteHandler}>Delete</button>\r\n      </div>\r\n\r\n      <h3 className=\"title\" title={props.item.title}>\r\n        {props.item.title}\r\n      </h3>\r\n      <p className=\"body\" title={props.item.body}>\r\n        {props.item.body}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(ItemCard);\r\n","import React from 'react';\r\nimport './Loading.css';\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"lds-ripple\">\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","export const SET_ITEMS = 'SET_ITEMS';\r\nexport const GET_ITEMS = 'GET_ITEMS';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const SUCCESS_DELETE_ITEM = 'SUCCESS_DELETE_ITEM';\r\n\r\nexport const getItems = () => {\r\n  return {\r\n    type: GET_ITEMS,\r\n  };\r\n};\r\n\r\nexport const setItems = (items) => {\r\n  return {\r\n    type: SET_ITEMS,\r\n    items,\r\n  };\r\n};\r\n\r\nexport const deleteItem = (id) => {\r\n  return {\r\n    type: DELETE_ITEM,\r\n    id,\r\n  };\r\n};\r\n\r\nexport const successDeleteItem = (id) => {\r\n  return {\r\n    type: SUCCESS_DELETE_ITEM,\r\n    id,\r\n  };\r\n};\r\n","export const SET_LOADING = 'SET_LOADING';\r\n\r\nexport const setLoading = (loading) => {\r\n  return {\r\n    type: SET_LOADING,\r\n    loading,\r\n  };\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ItemCard from './ItemCard/ItemCard';\r\nimport Loading from '../../components/Loading/Loading';\r\nimport './ItemList.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from './store/action-types';\r\nimport * as rootActionCreators from '../../store/action-types';\r\n\r\nconst ItemList = (props) => {\r\n  useEffect(() => {\r\n    props.getItems();\r\n  }, []);\r\n\r\n  const onDelete = (id) => {\r\n    props.deleteItem(id);\r\n  };\r\n\r\n  const itemList = props.items.map((item) => {\r\n    return <ItemCard key={item.id} item={item} onDelete={onDelete}></ItemCard>;\r\n  });\r\n\r\n  return (\r\n    <div className=\"ItemList\">\r\n      {itemList}\r\n      {props.loading && <Loading />}\r\n      {!props.loading && itemList.length === 0 && (\r\n        <p className=\"not-found-text\">No Item Found</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: state.listPageReducer.items,\r\n    loading: state.rootReducer.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getItems: () => dispatch(actionCreators.getItems()),\r\n    setItems: (items = []) => dispatch(actionCreators.setItems(items)),\r\n    deleteItem: (id) => dispatch(actionCreators.deleteItem(id)),\r\n    setLoading: (loading = true) =>\r\n      dispatch(rootActionCreators.setLoading(loading)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(ItemList));\r\n","const apiEndpoint = 'https://jsonplaceholder.typicode.com/posts';\r\nconst PAGE_MODE = {\r\n  INSERT: 'Insert',\r\n  UPDATE: 'Update',\r\n};\r\nexport { apiEndpoint, PAGE_MODE };\r\n","export const SET_ITEM = 'SET_ITEM';\r\nexport const SET_ID = 'SET_ID';\r\nexport const SET_TITLE = 'SET_TITLE';\r\nexport const SET_BODY = 'SET_BODY';\r\nexport const SET_PAGE_MODE = 'SET_PAGE_MODE';\r\nexport const GET_ITEM = 'GET_ITEM';\r\nexport const SUCCESS_GET_ITEM = 'SUCCESS_GET_ITEM';\r\nexport const POST_ITEM = 'POST_ITEM';\r\nexport const SUCCESS_POST_ITEM = 'SUCCESS_POST_ITEM';\r\nexport const PUT_ITEM = 'PUT_ITEM';\r\nexport const SUCCESS_PUT_ITEM = 'SUCCESS_POST_ITEM';\r\n\r\nexport const setItem = (item) => {\r\n  return {\r\n    type: SET_ITEM,\r\n    item: { ...item },\r\n  };\r\n};\r\n\r\nexport const getItem = (id) => {\r\n  return {\r\n    type: GET_ITEM,\r\n    id,\r\n  };\r\n};\r\n\r\nexport const postItem = (item, callback) => {\r\n  return {\r\n    type: POST_ITEM,\r\n    item,\r\n    callback,\r\n  };\r\n};\r\n\r\nexport const putItem = (item, callback) => {\r\n  return {\r\n    type: PUT_ITEM,\r\n    item,\r\n    callback,\r\n  };\r\n};\r\n\r\nexport const successGetItem = (item) => {\r\n  return {\r\n    type: SUCCESS_GET_ITEM,\r\n    item,\r\n  };\r\n};\r\n\r\nexport const successPost = (item) => {\r\n  return {\r\n    type: SUCCESS_POST_ITEM,\r\n    item,\r\n  };\r\n};\r\n\r\nexport const successPut = (item) => {\r\n  return {\r\n    type: SUCCESS_PUT_ITEM,\r\n    item,\r\n  };\r\n};\r\n","import * as actionTypes from './action-types';\r\n\r\nexport const getItem = (id) => {\r\n  return actionTypes.getItem(id);\r\n};\r\n\r\nexport const setItem = (item) => {\r\n  return actionTypes.setItem(item);\r\n};\r\n\r\nexport const successGetItem = (item) => {\r\n  return actionTypes.setItem(item);\r\n};\r\n\r\nexport const postItem = (item, callback) => {\r\n  return actionTypes.postItem(item, callback);\r\n};\r\n\r\nexport const putItem = (item, callback) => {\r\n  return actionTypes.putItem(item, callback);\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './ItemDetail.css';\r\nimport Loading from '../../components/Loading/Loading';\r\nimport { PAGE_MODE } from '../../constants';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getItem, setItem, postItem, putItem } from './store/actions';\r\n\r\nconst ItemDetail = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [pageMode, setPageMode] = useState(\r\n    !!props.match.params.id ? PAGE_MODE.UPDATE : PAGE_MODE.INSERT\r\n  );\r\n\r\n  const item = useSelector((state) => state.detailPageReducer.item);\r\n  const loading = useSelector((state) => state.rootReducer.loading);\r\n\r\n  useEffect(() => {\r\n    dispatch(setItem({ id: '', title: '', body: '' }));\r\n    if (pageMode === PAGE_MODE.UPDATE) {\r\n      dispatch(getItem(props.match.params.id));\r\n    }\r\n  }, []);\r\n\r\n  const titleChangedHandler = (e) => {\r\n    item.title = e.target.value;\r\n    dispatch(setItem(item));\r\n  };\r\n\r\n  const bodyChangedHandler = (e) => {\r\n    item.body = e.target.value;\r\n    dispatch(setItem(item));\r\n  };\r\n\r\n  const navigateToListPage = () => {\r\n    props.history.push('/item-list');\r\n  };\r\n\r\n  const addItemHandler = () => {\r\n    const callback = () => {\r\n      navigateToListPage();\r\n    };\r\n    dispatch(postItem(item, callback));\r\n  };\r\n\r\n  const updateItemHandler = () => {\r\n    const callback = () => {\r\n      navigateToListPage();\r\n    };\r\n    dispatch(putItem(item, callback));\r\n  };\r\n\r\n  return (\r\n    <div className=\"ItemDetail\">\r\n      <div className=\"form-group\">\r\n        <label>Title</label>\r\n        <input\r\n          className=\"form-item\"\r\n          id=\"title\"\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          onChange={titleChangedHandler}\r\n          value={item.title}></input>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Body</label>\r\n        <textarea\r\n          className=\"form-item\"\r\n          id=\"body\"\r\n          type=\"text\"\r\n          rows=\"5\"\r\n          placeholder=\"Body\"\r\n          onChange={bodyChangedHandler}\r\n          value={item.body}></textarea>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        {pageMode === PAGE_MODE.INSERT ? (\r\n          <button className=\"button\" onClick={addItemHandler}>\r\n            Add\r\n          </button>\r\n        ) : (\r\n          <button className=\"button\" onClick={updateItemHandler}>\r\n            Update\r\n          </button>\r\n        )}\r\n      </div>\r\n      {loading && <Loading />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemDetail;\r\n","import ItemList from './pages/ListPage/ItemList';\r\nimport ItemDetail from './pages/DetailPage/ItemDetail';\r\n\r\nconst routes = [\r\n  {\r\n    path: '/item-list',\r\n    component: ItemList,\r\n  },\r\n  {\r\n    path: '/add-new-item',\r\n    component: ItemDetail,\r\n  },\r\n  {\r\n    path: '/update-item/:id',\r\n    component: ItemDetail,\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import React from 'react';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar/NavigationBar';\nimport { Switch, Route, HashRouter, Redirect } from 'react-router-dom';\nimport routes from './routes';\nfunction App() {\n  return (\n    <HashRouter>\n      <NavigationBar />\n      <Switch>\n        <Redirect exact from=\"/\" to=\"item-list\" />\n        {routes.map((route) => {\n          return <Route key={route.path} exact {...route} />;\n        })}\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './action-types';\r\nconst initialState = {\r\n  loading: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.loading,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from './action-types';\r\nconst initialState = {\r\n  items: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_ITEMS:\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.SET_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: action.items,\r\n      };\r\n    case actionTypes.DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.SUCCESS_DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: [...state.items.filter((item) => item.id !== action.id)],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from './action-types';\r\n\r\nconst initialState = {\r\n  item: {\r\n    id: '',\r\n    title: '',\r\n    body: '',\r\n  },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_ITEM:\r\n      return {\r\n        ...state,\r\n        item: action.item,\r\n      };\r\n    case actionTypes.GET_ITEM:\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.SUCCESS_GET_ITEM:\r\n      return {\r\n        ...state,\r\n        item: { ...action.item },\r\n      };\r\n    case actionTypes.POST_ITEM:\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.PUT_ITEM:\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.SUCCESS_POST_ITEM:\r\n      return {\r\n        ...state,\r\n        item: { ...action.item },\r\n      };\r\n    case actionTypes.SUCCESS_PUT_ITEM:\r\n      return {\r\n        ...state,\r\n        item: { ...action.item },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import rootReducer from './reducers';\r\nimport { combineReducers } from 'redux';\r\nimport listPageReducer from '../pages/ListPage/store/reducers';\r\nimport detailPageReducer from '../pages/DetailPage/store/reducers';\r\n\r\nexport const combinedReducers = combineReducers({\r\n  rootReducer,\r\n  listPageReducer,\r\n  detailPageReducer,\r\n});\r\n","import * as actionTypes from './action-types';\r\n\r\nexport const setLoading = (loading) => {\r\n  return actionTypes.setLoading(loading);\r\n};\r\n","import { takeLatest, put, call } from 'redux-saga/effects';\r\nimport * as actionTypes from './action-types';\r\nimport { successGetItems, successDeleteItem } from './actions';\r\nimport { setLoading } from '../../../store/actions';\r\nimport axios from 'axios';\r\nimport { apiEndpoint } from '../../../constants';\r\n\r\nexport function* getItems(action) {\r\n  yield put(setLoading(true));\r\n  try {\r\n    const response = yield call(axios.get, apiEndpoint);\r\n    yield put(successGetItems(response.data));\r\n  } catch (error) {\r\n    alert(error); //For just demo purpose\r\n  } finally {\r\n    yield put(setLoading(false));\r\n  }\r\n}\r\n\r\nexport function* deleteItem(action) {\r\n  yield put(setLoading(true));\r\n  try {\r\n    yield call(axios.delete, `${apiEndpoint}/${action.id}`);\r\n    yield put(successDeleteItem(action.id));\r\n  } catch (error) {\r\n    yield alert(error); //For just demo purpose\r\n  } finally {\r\n    yield put(setLoading(false));\r\n  }\r\n}\r\n\r\nexport default function* listPageServices() {\r\n  yield takeLatest(actionTypes.GET_ITEMS, getItems);\r\n  yield takeLatest(actionTypes.DELETE_ITEM, deleteItem);\r\n}\r\n","import * as actionTypes from './action-types';\r\n\r\nexport const successGetItems = (items) => {\r\n  return actionTypes.setItems(items);\r\n};\r\n\r\nexport const successDeleteItem = (id) => {\r\n  return actionTypes.successDeleteItem(id);\r\n};\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport * as actionTypes from './action-types';\r\nimport { setLoading } from '../../../store/actions';\r\nimport { apiEndpoint } from '../../../constants';\r\nfunction* getItem({ id }) {\r\n  yield put(setLoading(true));\r\n  try {\r\n    const response = yield call(axios.get, `${apiEndpoint}/${id}`);\r\n    yield put(actionTypes.successGetItem(response.data));\r\n  } catch (error) {\r\n    alert(error); //For just demo purpose\r\n  } finally {\r\n    yield put(setLoading(false));\r\n  }\r\n}\r\n\r\nfunction* postItem({ item, callback }) {\r\n  yield put(setLoading(true));\r\n  try {\r\n    const response = yield call(axios.post, apiEndpoint, item);\r\n    yield put(actionTypes.successPost(response.data));\r\n    callback();\r\n  } catch (error) {\r\n    alert(error); //For just demo purpose\r\n  } finally {\r\n    yield put(setLoading(false));\r\n  }\r\n}\r\n\r\nfunction* putItem({ item, callback }) {\r\n  yield put(setLoading(true));\r\n  try {\r\n    const response = yield call(axios.put, `${apiEndpoint}/${item.id}`, item);\r\n    yield put(actionTypes.successPut(response.data));\r\n    callback();\r\n  } catch (error) {\r\n    alert(error); //For just demo purpose\r\n  } finally {\r\n    yield put(setLoading(false));\r\n  }\r\n}\r\n\r\nexport default function* detailPageServices() {\r\n  yield takeLatest(actionTypes.GET_ITEM, getItem);\r\n  yield takeLatest(actionTypes.POST_ITEM, postItem);\r\n  yield takeLatest(actionTypes.PUT_ITEM, putItem);\r\n}\r\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { combinedReducers } from './store/store';\nimport createSagaMiddleware from 'redux-saga';\nimport listPageServices from './pages/ListPage/store/services';\nimport detailPageServices from './pages/DetailPage/store/services';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(combinedReducers, applyMiddleware(sagaMiddleware));\n\nfunction startServices() {\n  sagaMiddleware.run(listPageServices);\n  sagaMiddleware.run(detailPageServices);\n}\nstartServices();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}