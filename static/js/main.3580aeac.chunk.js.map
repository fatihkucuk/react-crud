{"version":3,"sources":["components/NavigationBar/NavigationBar.js","pages/ListPage/ItemCard/ItemCard.js","components/Loading/Loading.js","pages/ListPage/store/action-types.js","store/action-types.js","pages/ListPage/ItemList.js","pages/DetailPage/store/action-types.js","constants.js","pages/DetailPage/ItemDetail.js","routes.js","App.js","serviceWorker.js","store/reducers.js","pages/ListPage/store/reducers.js","pages/DetailPage/store/reducers.js","store/store.js","pages/ListPage/store/services.js","pages/ListPage/store/actions.js","pages/DetailPage/store/services.js","index.js"],"names":["NavigationBar","className","to","exact","withRouter","props","onClick","history","push","item","id","onDelete","title","body","Loading","setItems","items","type","setLoading","loading","connect","state","listPageReducer","rootReducer","dispatch","getItems","actionCreators","deleteItem","rootActionCreators","useEffect","itemList","map","key","length","successPost","successPut","apiEndpoint","PAGE_MODE","detailPageReducer","getItem","setItem","postItem","callback","putItem","useState","match","params","pageMode","navigateToListPage","placeholder","onChange","e","target","value","rows","routes","path","component","ItemList","ItemDetail","App","from","route","Boolean","window","location","hostname","initialState","reducer","action","filter","combinedReducers","combineReducers","listPageServices","put","call","axios","get","response","data","actionTypes","alert","delete","takeLatest","detailPageServices","post","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3580aeac.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './NavigationBar.css';\r\nconst NavigationBar = () => {\r\n  return (\r\n    <div className=\"NavigationBar\">\r\n      <header>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <NavLink to=\"/item-list\" exact>\r\n                List\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/add-new-item\">Add New Item</NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import React from 'react';\r\nimport './ItemCard.css';\r\nimport { withRouter } from 'react-router-dom';\r\nconst ItemCard = (props) => {\r\n  const updateHandler = () => {\r\n    props.history.push(`/update-item/${props.item.id}`);\r\n  };\r\n  const deleteHandler = () => {\r\n    props.onDelete(props.item.id);\r\n  };\r\n  return (\r\n    <div className=\"ItemCard\">\r\n      <div className=\"button-container\">\r\n        <button onClick={updateHandler}>Update</button>\r\n        <button onClick={deleteHandler}>Delete</button>\r\n      </div>\r\n\r\n      <h3 className=\"title\" title={props.item.title}>\r\n        {props.item.title}\r\n      </h3>\r\n      <p className=\"body\" title={props.item.body}>\r\n        {props.item.body}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(ItemCard);\r\n","import React from 'react';\r\nimport './Loading.css';\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"lds-ripple\">\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","export const SET_ITEMS = 'SET_ITEMS';\r\nexport const GET_ITEMS = 'GET_ITEMS';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const SUCCESS_DELETE_ITEM = 'SUCCESS_DELETE_ITEM';\r\n\r\nexport const getItems = () => {\r\n  return {\r\n    type: GET_ITEMS,\r\n  };\r\n};\r\n\r\nexport const setItems = (items) => {\r\n  return {\r\n    type: SET_ITEMS,\r\n    items,\r\n  };\r\n};\r\n\r\nexport const deleteItem = (id) => {\r\n  return {\r\n    type: DELETE_ITEM,\r\n    id,\r\n  };\r\n};\r\n\r\nexport const successDeleteItem = (id) => {\r\n  return {\r\n    type: SUCCESS_DELETE_ITEM,\r\n    id,\r\n  };\r\n};\r\n","export const SET_LOADING = 'SET_LOADING';\r\n\r\nexport const setLoading = (loading) => {\r\n  return {\r\n    type: SET_LOADING,\r\n    loading,\r\n  };\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ItemCard from './ItemCard/ItemCard';\r\nimport Loading from '../../components/Loading/Loading';\r\nimport './ItemList.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from './store/action-types';\r\nimport * as rootActionCreators from '../../store/action-types';\r\n\r\nconst ItemList = (props) => {\r\n  useEffect(() => {\r\n    props.getItems();\r\n  }, []);\r\n\r\n  const onDelete = (id) => {\r\n    props.deleteItem(id);\r\n  };\r\n\r\n  const itemList = props.items.map((item) => {\r\n    return <ItemCard key={item.id} item={item} onDelete={onDelete}></ItemCard>;\r\n  });\r\n\r\n  return (\r\n    <div className=\"ItemList\">\r\n      {itemList}\r\n      {props.loading && <Loading />}\r\n      {!props.loading && itemList.length === 0 && (\r\n        <p className=\"not-found-text\">No Item Found</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: state.listPageReducer.items,\r\n    loading: state.rootReducer.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getItems: () => dispatch(actionCreators.getItems()),\r\n    setItems: (items = []) => dispatch(actionCreators.setItems(items)),\r\n    deleteItem: (id) => dispatch(actionCreators.deleteItem(id)),\r\n    setLoading: (loading = true) =>\r\n      dispatch(rootActionCreators.setLoading(loading)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(ItemList));\r\n","export const SET_ITEM = 'SET_ITEM';\r\nexport const SET_ID = 'SET_ID';\r\nexport const SET_TITLE = 'SET_TITLE';\r\nexport const SET_BODY = 'SET_BODY';\r\nexport const SET_PAGE_MODE = 'SET_PAGE_MODE';\r\nexport const GET_ITEM = 'GET_ITEM';\r\nexport const SUCCESS_GET_ITEM = 'SUCCESS_GET_ITEM';\r\nexport const POST_ITEM = 'POST_ITEM';\r\nexport const SUCCESS_POST_ITEM = 'SUCCESS_POST_ITEM';\r\nexport const PUT_ITEM = 'PUT_ITEM';\r\nexport const SUCCESS_PUT_ITEM = 'SUCCESS_POST_ITEM';\r\n\r\nexport const setItem = (item) => {\r\n  return {\r\n    type: SET_ITEM,\r\n    item: { ...item },\r\n  };\r\n};\r\n\r\nexport const getItem = (id) => {\r\n  return {\r\n    type: GET_ITEM,\r\n    id,\r\n  };\r\n};\r\n\r\nexport const postItem = (item, callback) => {\r\n  return {\r\n    type: POST_ITEM,\r\n    item,\r\n    callback,\r\n  };\r\n};\r\n\r\nexport const putItem = (item, callback) => {\r\n  return {\r\n    type: PUT_ITEM,\r\n    item,\r\n    callback,\r\n  };\r\n};\r\n\r\nexport const successGetItem = (item) => {\r\n  return {\r\n    type: SUCCESS_GET_ITEM,\r\n    item,\r\n  };\r\n};\r\n\r\nexport const successPost = (item) => {\r\n  return {\r\n    type: SUCCESS_POST_ITEM,\r\n    item,\r\n  };\r\n};\r\n\r\nexport const successPut = (item) => {\r\n  return {\r\n    type: SUCCESS_PUT_ITEM,\r\n    item,\r\n  };\r\n};\r\n","const apiEndpoint = 'https://jsonplaceholder.typicode.com/posts';\r\nconst PAGE_MODE = {\r\n  INSERT: 'Insert',\r\n  UPDATE: 'Update',\r\n};\r\nexport { apiEndpoint, PAGE_MODE };\r\n","import React, { useState, useEffect } from 'react';\r\nimport './ItemDetail.css';\r\nimport Loading from '../../components/Loading/Loading';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from './store/action-types';\r\nimport * as rootActionCreators from '../../store/action-types';\r\nimport { PAGE_MODE } from '../../constants';\r\nconst ItemDetail = (props) => {\r\n  const [pageMode, setPageMode] = useState(\r\n    !!props.match.params.id ? PAGE_MODE.UPDATE : PAGE_MODE.INSERT\r\n  );\r\n\r\n  useEffect(() => {\r\n    props.setItem({ id: '', title: '', body: '' });\r\n    if (pageMode === PAGE_MODE.UPDATE) {\r\n      props.getItem(props.match.params.id);\r\n    }\r\n  }, []);\r\n\r\n  const titleChangedHandler = (e) => {\r\n    props.item.title = e.target.value;\r\n    props.setItem(props.item);\r\n  };\r\n\r\n  const bodyChangedHandler = (e) => {\r\n    props.item.body = e.target.value;\r\n    props.setItem(props.item);\r\n  };\r\n\r\n  const navigateToListPage = () => {\r\n    props.history.push('/item-list');\r\n  };\r\n\r\n  const addItemHandler = () => {\r\n    const callback = () => {\r\n      navigateToListPage();\r\n    };\r\n    props.postItem(props.item, callback);\r\n  };\r\n\r\n  const updateItemHandler = () => {\r\n    const callback = () => {\r\n      navigateToListPage();\r\n    };\r\n    props.setLoading(true);\r\n    props.putItem(props.item, callback);\r\n  };\r\n\r\n  return (\r\n    <div className=\"ItemDetail\">\r\n      <div className=\"form-group\">\r\n        <label>Title</label>\r\n        <input\r\n          className=\"form-item\"\r\n          id=\"title\"\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          onChange={titleChangedHandler}\r\n          value={props.item.title}></input>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Body</label>\r\n        <textarea\r\n          className=\"form-item\"\r\n          id=\"body\"\r\n          type=\"text\"\r\n          rows=\"5\"\r\n          placeholder=\"Body\"\r\n          onChange={bodyChangedHandler}\r\n          value={props.item.body}></textarea>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        {pageMode === PAGE_MODE.INSERT ? (\r\n          <button className=\"button\" onClick={addItemHandler}>\r\n            Add\r\n          </button>\r\n        ) : (\r\n          <button className=\"button\" onClick={updateItemHandler}>\r\n            Update\r\n          </button>\r\n        )}\r\n      </div>\r\n      {props.loading && <Loading />}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    item: state.detailPageReducer.item,\r\n    loading: state.rootReducer.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getItem: (id) => dispatch(actionCreators.getItem(id)),\r\n    setItem: (item) => dispatch(actionCreators.setItem(item)),\r\n    postItem: (item, callback) =>\r\n      dispatch(actionCreators.postItem(item, callback)),\r\n    putItem: (item, callback) =>\r\n      dispatch(actionCreators.putItem(item, callback)),\r\n    setLoading: (loading) => {\r\n      dispatch(rootActionCreators.setLoading(loading));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemDetail);\r\n","import ItemList from './pages/ListPage/ItemList';\r\nimport ItemDetail from './pages/DetailPage/ItemDetail';\r\n\r\nconst routes = [\r\n  {\r\n    path: '/item-list',\r\n    component: ItemList,\r\n  },\r\n  {\r\n    path: '/add-new-item',\r\n    component: ItemDetail,\r\n  },\r\n  {\r\n    path: '/update-item/:id',\r\n    component: ItemDetail,\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import React from 'react';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar/NavigationBar';\nimport { Switch, Route, HashRouter, Redirect } from 'react-router-dom';\nimport routes from './routes';\nfunction App() {\n  return (\n    <HashRouter>\n      <NavigationBar />\n      <Switch>\n        <Redirect exact from=\"/\" to=\"item-list\" />\n        {routes.map((route) => {\n          return <Route key={route.path} exact {...route} />;\n        })}\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './action-types';\r\nconst initialState = {\r\n  loading: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.loading,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from './action-types';\r\nconst initialState = {\r\n  items: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_ITEMS:\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.SET_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: action.items,\r\n      };\r\n    case actionTypes.DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.SUCCESS_DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: [...state.items.filter((item) => item.id !== action.id)],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from './action-types';\r\n\r\nconst initialState = {\r\n  item: {\r\n    id: '',\r\n    title: '',\r\n    body: '',\r\n  },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_ITEM:\r\n      return {\r\n        ...state,\r\n        item: action.item,\r\n      };\r\n    case actionTypes.GET_ITEM:\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.SUCCESS_GET_ITEM:\r\n      return {\r\n        ...state,\r\n        item: { ...action.item },\r\n      };\r\n    case actionTypes.POST_ITEM:\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.PUT_ITEM:\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.SUCCESS_POST_ITEM:\r\n      return {\r\n        ...state,\r\n        item: { ...action.item },\r\n      };\r\n    case actionTypes.SUCCESS_PUT_ITEM:\r\n      return {\r\n        ...state,\r\n        item: { ...action.item },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import rootReducer from './reducers';\r\nimport { combineReducers } from 'redux';\r\nimport listPageReducer from '../pages/ListPage/store/reducers';\r\nimport detailPageReducer from '../pages/DetailPage/store/reducers';\r\n\r\nexport const combinedReducers = combineReducers({\r\n  rootReducer,\r\n  listPageReducer,\r\n  detailPageReducer,\r\n});\r\n","import { takeLatest, put, call } from 'redux-saga/effects';\r\nimport * as actionTypes from './action-types';\r\nimport { successGetItems, successDeleteItem } from './actions';\r\nimport { setLoading } from '../../../store/action-types';\r\nimport axios from 'axios';\r\nimport { apiEndpoint } from '../../../constants';\r\n\r\nexport function* getItems(action) {\r\n  yield put(setLoading(true));\r\n  try {\r\n    const response = yield call(axios.get, apiEndpoint);\r\n    yield put(successGetItems(response.data));\r\n  } catch (error) {\r\n    alert(error); //For just demo purpose\r\n  } finally {\r\n    yield put(setLoading(false));\r\n  }\r\n}\r\n\r\nexport function* deleteItem(action) {\r\n  yield put(setLoading(true));\r\n  try {\r\n    yield call(axios.delete, `${apiEndpoint}/${action.id}`);\r\n    yield put(successDeleteItem(action.id));\r\n  } catch (error) {\r\n    yield alert(error); //For just demo purpose\r\n  } finally {\r\n    yield put(setLoading(false));\r\n  }\r\n}\r\n\r\nexport default function* listPageServices() {\r\n  yield takeLatest(actionTypes.GET_ITEMS, getItems);\r\n  yield takeLatest(actionTypes.DELETE_ITEM, deleteItem);\r\n}\r\n","import * as actionTypes from './action-types';\r\n\r\nexport const successGetItems = (items) => {\r\n  return actionTypes.setItems(items);\r\n};\r\n\r\nexport const successDeleteItem = (id) => {\r\n  return actionTypes.successDeleteItem(id);\r\n};\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport * as actionTypes from './action-types';\r\nimport { setLoading } from '../../../store/action-types';\r\nimport { apiEndpoint } from '../../../constants';\r\nfunction* getItem({ id }) {\r\n  yield put(setLoading(true));\r\n  try {\r\n    const response = yield call(axios.get, `${apiEndpoint}/${id}`);\r\n    yield put(actionTypes.successGetItem(response.data));\r\n  } catch (error) {\r\n    alert(error); //For just demo purpose\r\n  } finally {\r\n    yield put(setLoading(false));\r\n  }\r\n}\r\n\r\nfunction* postItem({ item, callback }) {\r\n  yield put(setLoading(true));\r\n  try {\r\n    const response = yield call(axios.post, apiEndpoint, item);\r\n    yield put(actionTypes.successPost(response.data));\r\n    callback();\r\n  } catch (error) {\r\n    alert(error); //For just demo purpose\r\n  } finally {\r\n    yield put(setLoading(false));\r\n  }\r\n}\r\n\r\nfunction* putItem({ item, callback }) {\r\n  yield put(setLoading(true));\r\n  try {\r\n    const response = yield call(axios.put, `${apiEndpoint}/${item.id}`, item);\r\n    yield put(actionTypes.successPut(response.data));\r\n    callback();\r\n  } catch (error) {\r\n    alert(error); //For just demo purpose\r\n  } finally {\r\n    yield put(setLoading(false));\r\n  }\r\n}\r\n\r\nexport default function* detailPageServices() {\r\n  yield takeLatest(actionTypes.GET_ITEM, getItem);\r\n  yield takeLatest(actionTypes.POST_ITEM, postItem);\r\n  yield takeLatest(actionTypes.PUT_ITEM, putItem);\r\n}\r\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { combinedReducers } from './store/store';\nimport createSagaMiddleware from 'redux-saga';\nimport listPageServices from './pages/ListPage/store/services';\nimport detailPageServices from './pages/DetailPage/store/services';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(combinedReducers, applyMiddleware(sagaMiddleware));\n\nfunction startServices() {\n  sagaMiddleware.run(listPageServices);\n  sagaMiddleware.run(detailPageServices);\n}\nstartServices();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}